#pragma once

#include "Core/Core.h"

enum class InputState;
enum class InputCode;

class Input
{
	friend class BindingModule;
	friend class EditorViewportPanel;

public:
	static void SetMousePosition(int x, int y);
	static std::pair<int, int> GetMousePosition();
	static std::pair<int, int> GetMouseDelta();

	//! TODO: hacked in solution currently, only supports one viewport
	static bool IsCursorInViewport();
	static void SetViewportMiddle(std::pair<int, int> middle);
	static void ClearViewport();

	static void ShowCursor(bool show);
	static bool IsCursorVisible();

	static std::string StateToString(InputState state);
	static std::string CodeToString(InputCode code);
	
private:
	static void Update();

};

enum class InputState
{
	NONE = 0b0000,
	RELEASED = 0b0001,
	PRESSED = 0b0010,
	HOLDING = 0b0100,
};

enum class InputType
{
	KEY,
	MOUSE
};

#include "Platform/Windows/SDL_keycode.h"

enum class InputCode
{
	KC_UNKNOWN					= SDLK_UNKNOWN,
	KC_RETURN					= SDLK_RETURN,
	KC_ESCAPE					= SDLK_ESCAPE,
	KC_BACKSPACE				= SDLK_BACKSPACE,
	KC_TAB						= SDLK_TAB,
	KC_SPACE					= SDLK_SPACE,
	KC_EXCLAIM					= SDLK_EXCLAIM,
	KC_QUOTEDBL					= SDLK_QUOTEDBL,
	KC_HASH						= SDLK_HASH,
	KC_PERCENT					= SDLK_PERCENT,
	KC_DOLLAR					= SDLK_DOLLAR,
	KC_AMPERSAND				= SDLK_AMPERSAND,
	KC_QUOTE					= SDLK_QUOTE,
	KC_LEFTPAREN				= SDLK_LEFTPAREN,
	KC_RIGHTPAREN				= SDLK_RIGHTPAREN,
	KC_ASTERISK					= SDLK_ASTERISK,
	KC_PLUS						= SDLK_PLUS,
	KC_COMMA					= SDLK_COMMA,
	KC_MINUS					= SDLK_MINUS,
	KC_PERIOD					= SDLK_PERIOD,
	KC_SLASH					= SDLK_SLASH,
	KC_N_0						= SDLK_0,
	KC_N_1						= SDLK_1,
	KC_N_2						= SDLK_2,
	KC_N_3						= SDLK_3,
	KC_N_4						= SDLK_4,
	KC_N_5						= SDLK_5,
	KC_N_6						= SDLK_6,
	KC_N_7						= SDLK_7,
	KC_N_8						= SDLK_8,
	KC_N_9						= SDLK_9,
	KC_COLON					= SDLK_COLON,
	KC_SEMICOLON				= SDLK_SEMICOLON,
	KC_LESS						= SDLK_LESS,
	KC_EQUALS					= SDLK_EQUALS,
	KC_GREATER					= SDLK_GREATER,
	KC_QUESTION					= SDLK_QUESTION,
	KC_AT						= SDLK_AT,
	KC_LEFTBRACKET				= SDLK_LEFTBRACKET,
	KC_BACKSLASH				= SDLK_BACKSLASH,
	KC_RIGHTBRACKET				= SDLK_RIGHTBRACKET,
	KC_CARET					= SDLK_CARET,
	KC_UNDERSCORE				= SDLK_UNDERSCORE,
	KC_BACKQUOTE				= SDLK_BACKQUOTE,
	KC_A						= 'A',
	KC_B						= 'B',
	KC_C						= 'C',
	KC_D						= 'D',
	KC_E						= 'E',
	KC_F						= 'F',
	KC_G						= 'G',
	KC_H						= 'H',
	KC_I						= 'I',
	KC_J						= 'J',
	KC_K						= 'K',
	KC_L						= 'L',
	KC_M						= 'M',
	KC_N						= 'N',
	KC_O						= 'O',
	KC_P						= 'P',
	KC_Q						= 'Q',
	KC_R						= 'R',
	KC_S						= 'S',
	KC_T						= 'T',
	KC_U						= 'U',
	KC_V						= 'V',
	KC_W						= 'W',
	KC_X						= 'X',
	KC_Y						= 'Y',
	KC_Z						= 'Z',
	KC_CAPSLOCK					= SDLK_CAPSLOCK,
	KC_F1						= SDLK_F1,
	KC_F2						= SDLK_F2,
	KC_F3						= SDLK_F3,
	KC_F4						= SDLK_F4,
	KC_F5						= SDLK_F5,
	KC_F6						= SDLK_F6,
	KC_F7						= SDLK_F7,
	KC_F8						= SDLK_F8,
	KC_F9						= SDLK_F9,
	KC_F10						= SDLK_F10,
	KC_F11						= SDLK_F11,
	KC_F12						= SDLK_F12,
	KC_PRINTSCREEN				= SDLK_PRINTSCREEN,
	KC_SCROLLLOCK				= SDLK_SCROLLLOCK,
	KC_PAUSE					= SDLK_PAUSE,
	KC_INSERT					= SDLK_INSERT,
	KC_HOME						= SDLK_HOME,
	KC_PAGEUP					= SDLK_PAGEUP,
	KC_DELETE					= SDLK_DELETE,
	KC_END						= SDLK_END,
	KC_PAGEDOWN					= SDLK_PAGEDOWN,
	KC_RIGHT					= SDLK_RIGHT,
	KC_LEFT						= SDLK_LEFT,
	KC_DOWN						= SDLK_DOWN,
	KC_UP						= SDLK_UP,
	KC_NUMLOCKCLEAR				= SDLK_NUMLOCKCLEAR,
	KC_KP_DIVIDE				= SDLK_KP_DIVIDE,
	KC_KP_MULTIPLY				= SDLK_KP_MULTIPLY,
	KC_KP_MINUS					= SDLK_KP_MINUS,
	KC_KP_PLUS					= SDLK_KP_PLUS,
	KC_KP_ENTER					= SDLK_KP_ENTER,
	KC_KP_1						= SDLK_KP_1,
	KC_KP_2						= SDLK_KP_2,
	KC_KP_3						= SDLK_KP_3,
	KC_KP_4						= SDLK_KP_4,
	KC_KP_5						= SDLK_KP_5,
	KC_KP_6						= SDLK_KP_6,
	KC_KP_7						= SDLK_KP_7,
	KC_KP_8						= SDLK_KP_8,
	KC_KP_9						= SDLK_KP_9,
	KC_KP_0						= SDLK_KP_0,
	KC_KP_PERIOD				= SDLK_KP_PERIOD,
	KC_APPLICATION				= SDLK_APPLICATION,
	KC_POWER					= SDLK_POWER,
	KC_KP_EQUALS				= SDLK_KP_EQUALS,
	KC_F13						= SDLK_F13,
	KC_F14						= SDLK_F14,
	KC_F15						= SDLK_F15,
	KC_F16						= SDLK_F16,
	KC_F17						= SDLK_F17,
	KC_F18						= SDLK_F18,
	KC_F19						= SDLK_F19,
	KC_F20						= SDLK_F20,
	KC_F21						= SDLK_F21,
	KC_F22						= SDLK_F22,
	KC_F23						= SDLK_F23,
	KC_F24						= SDLK_F24,
	KC_EXECUTE					= SDLK_EXECUTE,
	KC_HELP						= SDLK_HELP,
	KC_MENU						= SDLK_MENU,
	KC_SELECT					= SDLK_SELECT,
	KC_STOP						= SDLK_STOP,
	KC_AGAIN					= SDLK_AGAIN,
	KC_UNDO						= SDLK_UNDO,
	KC_CUT						= SDLK_CUT,
	KC_COPY						= SDLK_COPY,
	KC_PASTE					= SDLK_PASTE,
	KC_FIND						= SDLK_FIND,
	KC_MUTE						= SDLK_MUTE,
	KC_VOLUMEUP					= SDLK_VOLUMEUP,
	KC_VOLUMEDOWN				= SDLK_VOLUMEDOWN,
	KC_KP_COMMA					= SDLK_KP_COMMA,
	KC_KP_EQUALSAS400			= SDLK_KP_EQUALSAS400,
	KC_ALTERASE					= SDLK_ALTERASE,
	KC_SYSREQ					= SDLK_SYSREQ,
	KC_CANCEL					= SDLK_CANCEL,
	KC_CLEAR					= SDLK_CLEAR,
	KC_PRIOR					= SDLK_PRIOR,
	KC_RETURN2					= SDLK_RETURN2,
	KC_SEPARATOR				= SDLK_SEPARATOR,
	KC_OUT						= SDLK_OUT,
	KC_OPER						= SDLK_OPER,
	KC_CLEARAGAIN				= SDLK_CLEARAGAIN,
	KC_CRSEL					= SDLK_CRSEL,
	KC_EXSEL					= SDLK_EXSEL,
	KC_KP_00					= SDLK_KP_00,
	KC_KP_000					= SDLK_KP_000,
	KC_THOUSANDSSEPARATOR		= SDLK_THOUSANDSSEPARATOR,
	KC_DECIMALSEPARATOR			= SDLK_DECIMALSEPARATOR,
	KC_CURRENCYUNIT				= SDLK_CURRENCYUNIT,
	KC_CURRENCYSUBUNIT			= SDLK_CURRENCYSUBUNIT,
	KC_KP_LEFTPAREN				= SDLK_KP_LEFTPAREN,
	KC_KP_RIGHTPAREN			= SDLK_KP_RIGHTPAREN,
	KC_KP_LEFTBRACE				= SDLK_KP_LEFTBRACE,
	KC_KP_RIGHTBRACE			= SDLK_KP_RIGHTBRACE,
	KC_KP_TAB					= SDLK_KP_TAB,
	KC_KP_BACKSPACE				= SDLK_KP_BACKSPACE,
	KC_KP_A						= SDLK_KP_A,
	KC_KP_B						= SDLK_KP_B,
	KC_KP_C						= SDLK_KP_C,
	KC_KP_D						= SDLK_KP_D,
	KC_KP_E						= SDLK_KP_E,
	KC_KP_F						= SDLK_KP_F,
	KC_KP_XOR					= SDLK_KP_XOR,
	KC_KP_POWER					= SDLK_KP_POWER,
	KC_KP_PERCENT				= SDLK_KP_PERCENT,
	KC_KP_LESS					= SDLK_KP_LESS,
	KC_KP_GREATER				= SDLK_KP_GREATER,
	KC_KP_AMPERSAND				= SDLK_KP_AMPERSAND,
	KC_KP_DBLAMPERSAND			= SDLK_KP_DBLAMPERSAND,
	KC_KP_VERTICALBAR			= SDLK_KP_VERTICALBAR,
	KC_KP_DBLVERTICALBAR		= SDLK_KP_DBLVERTICALBAR,
	KC_KP_COLON					= SDLK_KP_COLON,
	KC_KP_HASH					= SDLK_KP_HASH,
	KC_KP_SPACE					= SDLK_KP_SPACE,
	KC_KP_AT					= SDLK_KP_AT,
	KC_KP_EXCLAM				= SDLK_KP_EXCLAM,
	KC_KP_MEMSTORE				= SDLK_KP_MEMSTORE,
	KC_KP_MEMRECALL				= SDLK_KP_MEMRECALL,
	KC_KP_MEMCLEAR				= SDLK_KP_MEMCLEAR,
	KC_KP_MEMADD				= SDLK_KP_MEMADD,
	KC_KP_MEMSUBTRACT			= SDLK_KP_MEMSUBTRACT,
	KC_KP_MEMMULTIPLY			= SDLK_KP_MEMMULTIPLY,
	KC_KP_MEMDIVIDE				= SDLK_KP_MEMDIVIDE,
	KC_KP_PLUSMINUS				= SDLK_KP_PLUSMINUS,
	KC_KP_CLEAR					= SDLK_KP_CLEAR,
	KC_KP_CLEARENTRY			= SDLK_KP_CLEARENTRY,
	KC_KP_BINARY				= SDLK_KP_BINARY,
	KC_KP_OCTAL					= SDLK_KP_OCTAL,
	KC_KP_DECIMAL				= SDLK_KP_DECIMAL,
	KC_KP_HEXADECIMAL			= SDLK_KP_HEXADECIMAL,
	KC_LCTRL					= SDLK_LCTRL,
	KC_LSHIFT					= SDLK_LSHIFT,
	KC_LALT						= SDLK_LALT,
	KC_LGUI						= SDLK_LGUI,
	KC_RCTRL					= SDLK_RCTRL,
	KC_RSHIFT					= SDLK_RSHIFT,
	KC_RALT						= SDLK_RALT,
	KC_RGUI						= SDLK_RGUI,
	KC_MODE						= SDLK_MODE,
	KC_AUDIONEXT				= SDLK_AUDIONEXT,
	KC_AUDIOPREV				= SDLK_AUDIOPREV,
	KC_AUDIOSTOP				= SDLK_AUDIOSTOP,
	KC_AUDIOPLAY				= SDLK_AUDIOPLAY,
	KC_AUDIOMUTE				= SDLK_AUDIOMUTE,
	KC_MEDIASELECT				= SDLK_MEDIASELECT,
	KC_WWW						= SDLK_WWW,
	KC_MAIL						= SDLK_MAIL,
	KC_CALCULATOR				= SDLK_CALCULATOR,
	KC_COMPUTER					= SDLK_COMPUTER,
	KC_AC_SEARCH				= SDLK_AC_SEARCH,
	KC_AC_HOME					= SDLK_AC_HOME,
	KC_AC_BACK					= SDLK_AC_BACK,
	KC_AC_FORWARD				= SDLK_AC_FORWARD,
	KC_AC_STOP					= SDLK_AC_STOP,
	KC_AC_REFRESH				= SDLK_AC_REFRESH,
	KC_AC_BOOKMARKS				= SDLK_AC_BOOKMARKS,
	KC_BRIGHTNESSDOWN			= SDLK_BRIGHTNESSDOWN,
	KC_BRIGHTNESSUP				= SDLK_BRIGHTNESSUP,
	KC_DISPLAYSWITCH			= SDLK_DISPLAYSWITCH,
	KC_KBDILLUMTOGGLE			= SDLK_KBDILLUMTOGGLE,
	KC_KBDILLUMDOWN				= SDLK_KBDILLUMDOWN,
	KC_KBDILLUMUP				= SDLK_KBDILLUMUP,
	KC_EJECT					= SDLK_EJECT,
	KC_SLEEP					= SDLK_SLEEP,
	KC_APP1						= SDLK_APP1,
	KC_APP2						= SDLK_APP2,
	KC_AUDIOREWIND				= SDLK_AUDIOREWIND,
	KC_AUDIOFASTFORWARD			= SDLK_AUDIOFASTFORWARD,
	MC_BUTTON_1,
	MC_BUTTON_2,
	MC_BUTTON_3,
	MC_WHEEL_UP,
	MC_WHEEL_DOWN,
	MC_WHEEL_LEFT,
	MC_WHEEL_RIGHT
};

std::ostream& operator<<(std::ostream& os, const InputState& state);
std::ostream& operator<<(std::ostream& os, const InputCode& code);
