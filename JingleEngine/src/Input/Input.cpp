#include "Input/Input.h"

std::string Input::StateToString(InputState state)
{
	switch (state)
	{
	case InputState::NONE:
		return "NONE";
	case InputState::RELEASED:
		return "RELEASED";
	case InputState::PRESSED:
		return "PRESSED";
	case InputState::HOLDING:
		return "HOLDING";
	}
	return "INVALID";
}

std::string Input::CodeToString(InputCode code)
{
	switch (code)
	{
	case InputCode::KC_UNKNOWN:				return "KC_UNKNOWN";
	case InputCode::KC_RETURN:				return "KC_RETURN";
	case InputCode::KC_ESCAPE:				return "KC_ESCAPE";
	case InputCode::KC_BACKSPACE:			return "KC_BACKSPACE";
	case InputCode::KC_TAB:					return "KC_TAB";
	case InputCode::KC_SPACE:				return "KC_SPACE";
	case InputCode::KC_EXCLAIM:				return "KC_EXCLAIM";
	case InputCode::KC_QUOTEDBL:			return "KC_QUOTEDBL";
	case InputCode::KC_HASH:				return "KC_HASH";
	case InputCode::KC_PERCENT:				return "KC_PERCENT";
	case InputCode::KC_DOLLAR:				return "KC_DOLLAR";
	case InputCode::KC_AMPERSAND:			return "KC_AMPERSAND";
	case InputCode::KC_QUOTE:				return "KC_QUOTE";
	case InputCode::KC_LEFTPAREN:			return "KC_LEFTPAREN";
	case InputCode::KC_RIGHTPAREN:			return "KC_RIGHTPAREN";
	case InputCode::KC_ASTERISK:			return "KC_ASTERISK";
	case InputCode::KC_PLUS:				return "KC_PLUS";
	case InputCode::KC_COMMA:				return "KC_COMMA";
	case InputCode::KC_MINUS:				return "KC_MINUS";
	case InputCode::KC_PERIOD:				return "KC_PERIOD";
	case InputCode::KC_SLASH:				return "KC_SLASH";
	case InputCode::KC_N_0:					return "KC_N_0";
	case InputCode::KC_N_1:					return "KC_N_1";
	case InputCode::KC_N_2:					return "KC_N_2";
	case InputCode::KC_N_3:					return "KC_N_3";
	case InputCode::KC_N_4:					return "KC_N_4";
	case InputCode::KC_N_5:					return "KC_N_5";
	case InputCode::KC_N_6:					return "KC_N_6";
	case InputCode::KC_N_7:					return "KC_N_7";
	case InputCode::KC_N_8:					return "KC_N_8";
	case InputCode::KC_N_9:					return "KC_N_9";
	case InputCode::KC_COLON:				return "KC_COLON";
	case InputCode::KC_SEMICOLON:			return "KC_SEMICOLON";
	case InputCode::KC_LESS:				return "KC_LESS";
	case InputCode::KC_EQUALS:				return "KC_EQUALS";
	case InputCode::KC_GREATER:				return "KC_GREATER";
	case InputCode::KC_QUESTION:			return "KC_QUESTION";
	case InputCode::KC_AT:					return "KC_AT";
	case InputCode::KC_LEFTBRACKET:			return "KC_LEFTBRACKET";
	case InputCode::KC_BACKSLASH:			return "KC_BACKSLASH";
	case InputCode::KC_RIGHTBRACKET:		return "KC_RIGHTBRACKET";
	case InputCode::KC_CARET:				return "KC_CARET";
	case InputCode::KC_UNDERSCORE:			return "KC_UNDERSCORE";
	case InputCode::KC_BACKQUOTE:			return "KC_BACKQUOTE";
	case InputCode::KC_A:					return "KC_A";
	case InputCode::KC_B:					return "KC_B";
	case InputCode::KC_C:					return "KC_C";
	case InputCode::KC_D:					return "KC_D";
	case InputCode::KC_E:					return "KC_E";
	case InputCode::KC_F:					return "KC_F";
	case InputCode::KC_G:					return "KC_G";
	case InputCode::KC_H:					return "KC_H";
	case InputCode::KC_I:					return "KC_I";
	case InputCode::KC_J:					return "KC_J";
	case InputCode::KC_K:					return "KC_K";
	case InputCode::KC_L:					return "KC_L";
	case InputCode::KC_M:					return "KC_M";
	case InputCode::KC_N:					return "KC_N";
	case InputCode::KC_O:					return "KC_O";
	case InputCode::KC_P:					return "KC_P";
	case InputCode::KC_Q:					return "KC_Q";
	case InputCode::KC_R:					return "KC_R";
	case InputCode::KC_S:					return "KC_S";
	case InputCode::KC_T:					return "KC_T";
	case InputCode::KC_U:					return "KC_U";
	case InputCode::KC_V:					return "KC_V";
	case InputCode::KC_W:					return "KC_W";
	case InputCode::KC_X:					return "KC_X";
	case InputCode::KC_Y:					return "KC_Y";
	case InputCode::KC_Z:					return "KC_Z";
	case InputCode::KC_CAPSLOCK:			return "KC_CAPSLOCK";
	case InputCode::KC_F1:					return "KC_F1";
	case InputCode::KC_F2:					return "KC_F2";
	case InputCode::KC_F3:					return "KC_F3";
	case InputCode::KC_F4:					return "KC_F4";
	case InputCode::KC_F5:					return "KC_F5";
	case InputCode::KC_F6:					return "KC_F6";
	case InputCode::KC_F7:					return "KC_F7";
	case InputCode::KC_F8:					return "KC_F8";
	case InputCode::KC_F9:					return "KC_F9";
	case InputCode::KC_F10:					return "KC_F10";
	case InputCode::KC_F11:					return "KC_F11";
	case InputCode::KC_F12:					return "KC_F12";
	case InputCode::KC_PRINTSCREEN:			return "KC_PRINTSCREEN";
	case InputCode::KC_SCROLLLOCK:			return "KC_SCROLLLOCK";
	case InputCode::KC_PAUSE:				return "KC_PAUSE";
	case InputCode::KC_INSERT:				return "KC_INSERT";
	case InputCode::KC_HOME:				return "KC_HOME";
	case InputCode::KC_PAGEUP:				return "KC_PAGEUP";
	case InputCode::KC_DELETE:				return "KC_DELETE";
	case InputCode::KC_END:					return "KC_END";
	case InputCode::KC_PAGEDOWN:			return "KC_PAGEDOWN";
	case InputCode::KC_RIGHT:				return "KC_RIGHT";
	case InputCode::KC_LEFT:				return "KC_LEFT";
	case InputCode::KC_DOWN:				return "KC_DOWN";
	case InputCode::KC_UP:					return "KC_UP";
	case InputCode::KC_NUMLOCKCLEAR:		return "KC_NUMLOCKCLEAR";
	case InputCode::KC_KP_DIVIDE:			return "KC_KP_DIVIDE";
	case InputCode::KC_KP_MULTIPLY:			return "KC_KP_MULTIPLY";
	case InputCode::KC_KP_MINUS:			return "KC_KP_MINUS";
	case InputCode::KC_KP_PLUS:				return "KC_KP_PLUS";
	case InputCode::KC_KP_ENTER:			return "KC_KP_ENTER";
	case InputCode::KC_KP_1:				return "KC_KP_1";
	case InputCode::KC_KP_2:				return "KC_KP_2";
	case InputCode::KC_KP_3:				return "KC_KP_3";
	case InputCode::KC_KP_4:				return "KC_KP_4";
	case InputCode::KC_KP_5:				return "KC_KP_5";
	case InputCode::KC_KP_6:				return "KC_KP_6";
	case InputCode::KC_KP_7:				return "KC_KP_7";
	case InputCode::KC_KP_8:				return "KC_KP_8";
	case InputCode::KC_KP_9:				return "KC_KP_9";
	case InputCode::KC_KP_0:				return "KC_KP_0";
	case InputCode::KC_KP_PERIOD:			return "KC_KP_PERIOD";
	case InputCode::KC_APPLICATION:			return "KC_APPLICATION";
	case InputCode::KC_POWER:				return "KC_POWER";
	case InputCode::KC_KP_EQUALS:			return "KC_KP_EQUALS";
	case InputCode::KC_F13:					return "KC_F13";
	case InputCode::KC_F14:					return "KC_F14";
	case InputCode::KC_F15:					return "KC_F15";
	case InputCode::KC_F16:					return "KC_F16";
	case InputCode::KC_F17:					return "KC_F17";
	case InputCode::KC_F18:					return "KC_F18";
	case InputCode::KC_F19:					return "KC_F19";
	case InputCode::KC_F20:					return "KC_F20";
	case InputCode::KC_F21:					return "KC_F21";
	case InputCode::KC_F22:					return "KC_F22";
	case InputCode::KC_F23:					return "KC_F23";
	case InputCode::KC_F24:					return "KC_F24";
	case InputCode::KC_EXECUTE:				return "KC_EXECUTE";
	case InputCode::KC_HELP:				return "KC_HELP";
	case InputCode::KC_MENU:				return "KC_MENU";
	case InputCode::KC_SELECT:				return "KC_SELECT";
	case InputCode::KC_STOP:				return "KC_STOP";
	case InputCode::KC_AGAIN:				return "KC_AGAIN";
	case InputCode::KC_UNDO:				return "KC_UNDO";
	case InputCode::KC_CUT:					return "KC_CUT";
	case InputCode::KC_COPY:				return "KC_COPY";
	case InputCode::KC_PASTE:				return "KC_PASTE";
	case InputCode::KC_FIND:				return "KC_FIND";
	case InputCode::KC_MUTE:				return "KC_MUTE";
	case InputCode::KC_VOLUMEUP:			return "KC_VOLUMEUP";
	case InputCode::KC_VOLUMEDOWN:			return "KC_VOLUMEDOWN";
	case InputCode::KC_KP_COMMA:			return "KC_KP_COMMA";
	case InputCode::KC_KP_EQUALSAS400:		return "KC_KP_EQUALSAS400";
	case InputCode::KC_ALTERASE:			return "KC_ALTERASE";
	case InputCode::KC_SYSREQ:				return "KC_SYSREQ";
	case InputCode::KC_CANCEL:				return "KC_CANCEL";
	case InputCode::KC_CLEAR:				return "KC_CLEAR";
	case InputCode::KC_PRIOR:				return "KC_PRIOR";
	case InputCode::KC_RETURN2:				return "KC_RETURN2";
	case InputCode::KC_SEPARATOR:			return "KC_SEPARATOR";
	case InputCode::KC_OUT:					return "KC_OUT";
	case InputCode::KC_OPER:				return "KC_OPER";
	case InputCode::KC_CLEARAGAIN:			return "KC_CLEARAGAIN";
	case InputCode::KC_CRSEL:				return "KC_CRSEL";
	case InputCode::KC_EXSEL:				return "KC_EXSEL";
	case InputCode::KC_KP_00:				return "KC_KP_00";
	case InputCode::KC_KP_000:				return "KC_KP_000";
	case InputCode::KC_THOUSANDSSEPARATOR:	return "KC_THOUSANDSSEPARATOR";
	case InputCode::KC_DECIMALSEPARATOR:	return "KC_DECIMALSEPARATOR";
	case InputCode::KC_CURRENCYUNIT:		return "KC_CURRENCYUNIT";
	case InputCode::KC_CURRENCYSUBUNIT:		return "KC_CURRENCYSUBUNIT";
	case InputCode::KC_KP_LEFTPAREN:		return "KC_KP_LEFTPAREN";
	case InputCode::KC_KP_RIGHTPAREN:		return "KC_KP_RIGHTPAREN";
	case InputCode::KC_KP_LEFTBRACE:		return "KC_KP_LEFTBRACE";
	case InputCode::KC_KP_RIGHTBRACE:		return "KC_KP_RIGHTBRACE";
	case InputCode::KC_KP_TAB:				return "KC_KP_TAB";
	case InputCode::KC_KP_BACKSPACE:		return "KC_KP_BACKSPACE";
	case InputCode::KC_KP_A:				return "KC_KP_A";
	case InputCode::KC_KP_B:				return "KC_KP_B";
	case InputCode::KC_KP_C:				return "KC_KP_C";
	case InputCode::KC_KP_D:				return "KC_KP_D";
	case InputCode::KC_KP_E:				return "KC_KP_E";
	case InputCode::KC_KP_F:				return "KC_KP_F";
	case InputCode::KC_KP_XOR:				return "KC_KP_XOR";
	case InputCode::KC_KP_POWER:			return "KC_KP_POWER";
	case InputCode::KC_KP_PERCENT:			return "KC_KP_PERCENT";
	case InputCode::KC_KP_LESS:				return "KC_KP_LESS";
	case InputCode::KC_KP_GREATER:			return "KC_KP_GREATER";
	case InputCode::KC_KP_AMPERSAND:		return "KC_KP_AMPERSAND";
	case InputCode::KC_KP_DBLAMPERSAND:		return "KC_KP_DBLAMPERSAND";
	case InputCode::KC_KP_VERTICALBAR:		return "KC_KP_VERTICALBAR";
	case InputCode::KC_KP_DBLVERTICALBAR:	return "KC_KP_DBLVERTICALBAR";
	case InputCode::KC_KP_COLON:			return "KC_KP_COLON";
	case InputCode::KC_KP_HASH:				return "KC_KP_HASH";
	case InputCode::KC_KP_SPACE:			return "KC_KP_SPACE";
	case InputCode::KC_KP_AT:				return "KC_KP_AT";
	case InputCode::KC_KP_EXCLAM:			return "KC_KP_EXCLAM";
	case InputCode::KC_KP_MEMSTORE:			return "KC_KP_MEMSTORE";
	case InputCode::KC_KP_MEMRECALL:		return "KC_KP_MEMRECALL";
	case InputCode::KC_KP_MEMCLEAR:			return "KC_KP_MEMCLEAR";
	case InputCode::KC_KP_MEMADD:			return "KC_KP_MEMADD";
	case InputCode::KC_KP_MEMSUBTRACT:		return "KC_KP_MEMSUBTRACT";
	case InputCode::KC_KP_MEMMULTIPLY:		return "KC_KP_MEMMULTIPLY";
	case InputCode::KC_KP_MEMDIVIDE:		return "KC_KP_MEMDIVIDE";
	case InputCode::KC_KP_PLUSMINUS:		return "KC_KP_PLUSMINUS";
	case InputCode::KC_KP_CLEAR:			return "KC_KP_CLEAR";
	case InputCode::KC_KP_CLEARENTRY:		return "KC_KP_CLEARENTRY";
	case InputCode::KC_KP_BINARY:			return "KC_KP_BINARY";
	case InputCode::KC_KP_OCTAL:			return "KC_KP_OCTAL";
	case InputCode::KC_KP_DECIMAL:			return "KC_KP_DECIMAL";
	case InputCode::KC_KP_HEXADECIMAL:		return "KC_KP_HEXADECIMAL";
	case InputCode::KC_LCTRL:				return "KC_LCTRL";
	case InputCode::KC_LSHIFT:				return "KC_LSHIFT";
	case InputCode::KC_LALT:				return "KC_LALT";
	case InputCode::KC_LGUI:				return "KC_LGUI";
	case InputCode::KC_RCTRL:				return "KC_RCTRL";
	case InputCode::KC_RSHIFT:				return "KC_RSHIFT";
	case InputCode::KC_RALT:				return "KC_RALT";
	case InputCode::KC_RGUI:				return "KC_RGUI";
	case InputCode::KC_MODE:				return "KC_MODE";
	case InputCode::KC_AUDIONEXT:			return "KC_AUDIONEXT";
	case InputCode::KC_AUDIOPREV:			return "KC_AUDIOPREV";
	case InputCode::KC_AUDIOSTOP:			return "KC_AUDIOSTOP";
	case InputCode::KC_AUDIOPLAY:			return "KC_AUDIOPLAY";
	case InputCode::KC_AUDIOMUTE:			return "KC_AUDIOMUTE";
	case InputCode::KC_MEDIASELECT:			return "KC_MEDIASELECT";
	case InputCode::KC_WWW:					return "KC_WWW";
	case InputCode::KC_MAIL:				return "KC_MAIL";
	case InputCode::KC_CALCULATOR:			return "KC_CALCULATOR";
	case InputCode::KC_COMPUTER:			return "KC_COMPUTER";
	case InputCode::KC_AC_SEARCH:			return "KC_AC_SEARCH";
	case InputCode::KC_AC_HOME:				return "KC_AC_HOME";
	case InputCode::KC_AC_BACK:				return "KC_AC_BACK";
	case InputCode::KC_AC_FORWARD:			return "KC_AC_FORWARD";
	case InputCode::KC_AC_STOP:				return "KC_AC_STOP";
	case InputCode::KC_AC_REFRESH:			return "KC_AC_REFRESH";
	case InputCode::KC_AC_BOOKMARKS:		return "KC_AC_BOOKMARKS";
	case InputCode::KC_BRIGHTNESSDOWN:		return "KC_BRIGHTNESSDOWN";
	case InputCode::KC_BRIGHTNESSUP:		return "KC_BRIGHTNESSUP";
	case InputCode::KC_DISPLAYSWITCH:		return "KC_DISPLAYSWITCH";
	case InputCode::KC_KBDILLUMTOGGLE:		return "KC_KBDILLUMTOGGLE";
	case InputCode::KC_KBDILLUMDOWN:		return "KC_KBDILLUMDOWN";
	case InputCode::KC_KBDILLUMUP:			return "KC_KBDILLUMUP";
	case InputCode::KC_EJECT:				return "KC_EJECT";
	case InputCode::KC_SLEEP:				return "KC_SLEEP";
	case InputCode::KC_APP1:				return "KC_APP1";
	case InputCode::KC_APP2:				return "KC_APP2";
	case InputCode::KC_AUDIOREWIND:			return "KC_AUDIOREWIND";
	case InputCode::KC_AUDIOFASTFORWARD:	return "KC_AUDIOFASTFORWARD";
	case InputCode::MC_BUTTON_1:			return "MC_BUTTON_1";
	case InputCode::MC_BUTTON_2:			return "MC_BUTTON_2";
	case InputCode::MC_BUTTON_3:			return "MC_BUTTON_3";
	case InputCode::MC_WHEEL_UP:			return "MC_WHEEL_UP";
	case InputCode::MC_WHEEL_DOWN:			return "MC_WHEEL_DOWN";
	case InputCode::MC_WHEEL_LEFT:			return "MC_WHEEL_LEFT";
	case InputCode::MC_WHEEL_RIGHT:			return "MC_WHEEL_RIGHT";
	}
	return "INVALID";
}

std::ostream& operator<<(std::ostream& os, const InputState& state)
{
	os << Input::StateToString(state);
	return os;
}

std::ostream& operator<<(std::ostream& os, const InputCode& state)
{
	os << Input::CodeToString(state);
	return os;
}
