
class TestModule extends Module {

  TestModule::dtor() (Native)
}

class Module extends Object {

  Module::dtor() (Native)
}

class Object {

  Object::dtor() (Native)

  Object::ctor() (Native)

  string Object::ToString() (Native)

  Type Object::GetType() (Native)

  bool Object::operator==(Object) (Native)

  bool Object::operator!=(Object) (Native)
}

struct string {

  string string::operator+(int) (Native)

  string::dtor() (Native)

  bool string::operator<=(string) (Native)

  string::ctor() (Native)

  string string::operator+(float) (Native)

  string string::operator+(bool) (Native)

  string string::operator+(byte) (Native)

  string string::operator+(string) (Native)

  string string::operator+(double) (Native)

  void string::operator=(string) (Native)

  bool string::operator>(string) (Native)

  bool string::operator>=(string) (Native)

  bool string::operator<(string) (Native)

  bool string::operator==(string) (Native)

  bool string::operator!=(string) (Native)
}

struct bool {
   bool value

  bool bool::operator>=(bool) (Native)

  bool::dtor() (Native)

  bool bool::operator==(bool) (Native)

  void bool::operator=(bool) (Native)

  bool::ctor() (Native)

  bool bool::operator>(bool) (Native)

  bool bool::operator<(bool) (Native)

  bool bool::operator!=(int) (Native)

  bool bool::operator<=(bool) (Native)

  bool bool::operator!=(bool) (Native)

  void bool::operator=(byte) (Native)

  bool bool::operator>(byte) (Native)

  bool bool::operator>=(byte) (Native)

  bool bool::operator>(float) (Native)

  bool bool::operator<(byte) (Native)

  bool bool::operator<=(byte) (Native)

  bool bool::operator==(byte) (Native)

  bool bool::operator<=(int) (Native)

  bool bool::operator!=(byte) (Native)

  void bool::operator=(double) (Native)

  bool bool::operator>(double) (Native)

  bool bool::operator>=(double) (Native)

  bool bool::operator<(double) (Native)

  bool bool::operator==(float) (Native)

  bool bool::operator<=(double) (Native)

  bool bool::operator==(double) (Native)

  bool bool::operator!=(double) (Native)

  void bool::operator=(float) (Native)

  bool bool::operator>=(float) (Native)

  bool bool::operator>=(int) (Native)

  bool bool::operator<(float) (Native)

  bool bool::operator<=(float) (Native)

  bool bool::operator!=(float) (Native)

  void bool::operator=(int) (Native)

  bool bool::operator>(int) (Native)

  bool bool::operator<(int) (Native)

  bool bool::operator==(int) (Native)

  string bool::operator+(string) (Native)
}

struct byte {
   byte value

  bool byte::operator>=(bool) (Native)

  byte::dtor() (Native)

  byte byte::operator-(double) (Native)

  bool byte::operator==(bool) (Native)

  byte::ctor() (Native)

  bool byte::operator<(bool) (Native)

  void byte::operator=(bool) (Native)

  byte byte::operator+(double) (Native)

  bool byte::operator>(bool) (Native)

  bool byte::operator!=(int) (Native)

  byte byte::operator-(float) (Native)

  bool byte::operator<=(bool) (Native)

  bool byte::operator!=(bool) (Native)

  byte byte::operator*(byte) (Native)

  byte byte::operator/(byte) (Native)

  bool byte::operator<=(float) (Native)

  byte byte::operator+(byte) (Native)

  byte byte::operator/(float) (Native)

  byte byte::operator-(byte) (Native)

  bool byte::operator<=(byte) (Native)

  byte byte::operator%(byte) (Native)

  bool byte::operator>=(double) (Native)

  void byte::operator=(byte) (Native)

  bool byte::operator>(byte) (Native)

  bool byte::operator>=(byte) (Native)

  bool byte::operator>(float) (Native)

  bool byte::operator<(byte) (Native)

  bool byte::operator==(byte) (Native)

  bool byte::operator<=(int) (Native)

  byte byte::operator%(int) (Native)

  bool byte::operator!=(byte) (Native)

  byte byte::operator*(double) (Native)

  byte byte::operator/(double) (Native)

  void byte::operator=(double) (Native)

  bool byte::operator>(double) (Native)

  bool byte::operator<(double) (Native)

  bool byte::operator==(float) (Native)

  bool byte::operator<=(double) (Native)

  bool byte::operator==(double) (Native)

  bool byte::operator!=(double) (Native)

  byte byte::operator*(float) (Native)

  byte byte::operator+(float) (Native)

  void byte::operator=(float) (Native)

  bool byte::operator>=(float) (Native)

  bool byte::operator>=(int) (Native)

  bool byte::operator<(float) (Native)

  byte byte::operator+(int) (Native)

  bool byte::operator!=(float) (Native)

  byte byte::operator*(int) (Native)

  byte byte::operator/(int) (Native)

  byte byte::operator-(int) (Native)

  string byte::operator+(string) (Native)

  void byte::operator=(int) (Native)

  bool byte::operator>(int) (Native)

  bool byte::operator<(int) (Native)

  bool byte::operator==(int) (Native)
}

struct double {
   double value

  double double::operator+(int) (Native)

  bool double::operator>=(bool) (Native)

  double::dtor() (Native)

  bool double::operator==(bool) (Native)

  double::ctor() (Native)

  void double::operator=(bool) (Native)

  double double::operator/(float) (Native)

  double double::operator-(byte) (Native)

  bool double::operator>(bool) (Native)

  double double::operator-(float) (Native)

  bool double::operator<(bool) (Native)

  bool double::operator!=(int) (Native)

  void double::operator=(double) (Native)

  bool double::operator<=(bool) (Native)

  bool double::operator!=(bool) (Native)

  double double::operator*(byte) (Native)

  bool double::operator==(float) (Native)

  bool double::operator<=(double) (Native)

  double double::operator/(byte) (Native)

  bool double::operator>=(int) (Native)

  bool double::operator<(float) (Native)

  double double::operator+(byte) (Native)

  void double::operator=(byte) (Native)

  bool double::operator>(byte) (Native)

  bool double::operator>=(byte) (Native)

  bool double::operator>(float) (Native)

  bool double::operator<(byte) (Native)

  bool double::operator<=(byte) (Native)

  double double::operator+(float) (Native)

  bool double::operator==(byte) (Native)

  bool double::operator<=(int) (Native)

  bool double::operator!=(byte) (Native)

  double double::operator*(double) (Native)

  double double::operator/(double) (Native)

  string double::operator+(string) (Native)

  double double::operator+(double) (Native)

  double double::operator-(double) (Native)

  bool double::operator>(double) (Native)

  bool double::operator>=(double) (Native)

  bool double::operator<(double) (Native)

  bool double::operator==(double) (Native)

  double double::operator/(int) (Native)

  bool double::operator!=(double) (Native)

  double double::operator*(float) (Native)

  void double::operator=(float) (Native)

  bool double::operator>=(float) (Native)

  bool double::operator<=(float) (Native)

  bool double::operator!=(float) (Native)

  double double::operator*(int) (Native)

  double double::operator-(int) (Native)

  void double::operator=(int) (Native)

  bool double::operator>(int) (Native)

  bool double::operator<(int) (Native)

  bool double::operator==(int) (Native)
}

struct float {
   float value

  bool float::operator>=(bool) (Native)

  void float::operator=(double) (Native)

  float::dtor() (Native)

  bool float::operator==(bool) (Native)

  void float::operator=(bool) (Native)

  float::ctor() (Native)

  bool float::operator>(bool) (Native)

  float float::operator/(double) (Native)

  bool float::operator<(bool) (Native)

  bool float::operator!=(int) (Native)

  bool float::operator<=(bool) (Native)

  bool float::operator!=(bool) (Native)

  float float::operator*(byte) (Native)

  float float::operator/(byte) (Native)

  bool float::operator<=(byte) (Native)

  float float::operator+(byte) (Native)

  float float::operator/(float) (Native)

  float float::operator-(byte) (Native)

  void float::operator=(byte) (Native)

  bool float::operator>(byte) (Native)

  bool float::operator>=(byte) (Native)

  bool float::operator>(float) (Native)

  bool float::operator<(byte) (Native)

  bool float::operator==(byte) (Native)

  bool float::operator<=(int) (Native)

  float float::operator+(int) (Native)

  bool float::operator!=(byte) (Native)

  float float::operator*(double) (Native)

  bool float::operator==(float) (Native)

  bool float::operator<=(double) (Native)

  float float::operator+(double) (Native)

  float float::operator-(double) (Native)

  void float::operator=(int) (Native)

  bool float::operator>(double) (Native)

  bool float::operator>=(double) (Native)

  bool float::operator<(double) (Native)

  float float::operator*(int) (Native)

  bool float::operator==(double) (Native)

  bool float::operator!=(double) (Native)

  float float::operator*(float) (Native)

  bool float::operator<=(float) (Native)

  float float::operator+(float) (Native)

  float float::operator-(float) (Native)

  void float::operator=(float) (Native)

  bool float::operator>=(float) (Native)

  bool float::operator>=(int) (Native)

  bool float::operator<(float) (Native)

  bool float::operator!=(float) (Native)

  float float::operator/(int) (Native)

  float float::operator-(int) (Native)

  bool float::operator>(int) (Native)

  bool float::operator<(int) (Native)

  bool float::operator==(int) (Native)

  string float::operator+(string) (Native)
}

struct int {
   int value

  bool int::operator>=(bool) (Native)

  int::dtor() (Native)

  bool int::operator==(bool) (Native)

  int::ctor() (Native)

  void int::operator=(float) (Native)

  bool int::operator>(bool) (Native)

  void int::operator=(bool) (Native)

  bool int::operator<(bool) (Native)

  bool int::operator!=(int) (Native)

  bool int::operator<=(bool) (Native)

  bool int::operator!=(bool) (Native)

  int int::operator*(byte) (Native)

  int int::operator/(byte) (Native)

  bool int::operator>=(double) (Native)

  int int::operator+(byte) (Native)

  int int::operator/(float) (Native)

  int int::operator-(byte) (Native)

  int int::operator%(byte) (Native)

  bool int::operator==(float) (Native)

  bool int::operator<=(double) (Native)

  void int::operator=(byte) (Native)

  bool int::operator>(byte) (Native)

  bool int::operator>=(byte) (Native)

  bool int::operator>(float) (Native)

  bool int::operator<(byte) (Native)

  bool int::operator<=(byte) (Native)

  bool int::operator==(byte) (Native)

  bool int::operator<=(int) (Native)

  bool int::operator!=(byte) (Native)

  bool int::operator>=(int) (Native)

  bool int::operator<(float) (Native)

  int int::operator*(double) (Native)

  int int::operator/(double) (Native)

  int int::operator+(double) (Native)

  int int::operator-(double) (Native)

  int int::operator/(int) (Native)

  void int::operator=(double) (Native)

  bool int::operator>(double) (Native)

  int int::operator%(int) (Native)

  bool int::operator<(double) (Native)

  bool int::operator==(double) (Native)

  void int::operator=(int) (Native)

  bool int::operator!=(double) (Native)

  int int::operator*(float) (Native)

  int int::operator+(float) (Native)

  int int::operator-(float) (Native)

  bool int::operator>=(float) (Native)

  bool int::operator<=(float) (Native)

  bool int::operator!=(float) (Native)

  int int::operator*(int) (Native)

  string int::operator+(string) (Native)

  int int::operator+(int) (Native)

  int int::operator-(int) (Native)

  bool int::operator>(int) (Native)

  bool int::operator<(int) (Native)

  bool int::operator==(int) (Native)
}

class #global extends Object {

  #global::dtor() (Native)

  void ImGui_Text(Object) (Native)

  void ImGui_End() (Native)

  Application GetApplication() (Native)

  bool ImGui_WantCaptureMouse() (Native)

  bool ImGui_WantCaptureKeyboard() (Native)

  bool ImGui_Begin(string) (Native)

  void ImGui_Text(string) (Native)

  void #global::Initialize() {
    [00000000]  push 8                                                                                 JingleScript::ValueItem::Push
    [00000001]   copy_address 0                                                                        
    [00000002]   push 32                                                                               JingleScript::ValueItem::Push
    [00000003]    copy_data string [Script Test] 32                                                    JingleScript::Compiler::CompileConstant
    [00000004]    call_method [EditorAttribute::ctor(string)] 6                                        JingleScript::Compiler::CompileFunctionCall
    [00000005]   pop 32                                                                                JingleScript::ValueItem::Pop
    [00000006]   copy_address 0                                                                        
    [00000007]   push 32                                                                               JingleScript::ValueItem::Push
    [00000008]    copy_data string [Viewport] 32                                                       JingleScript::Compiler::CompileConstant
    [00000009]    call_method [EditorAttribute::ctor(string)] 6                                        JingleScript::Compiler::CompileFunctionCall
    [0000000A]   pop 32                                                                                JingleScript::ValueItem::Pop
    [0000000B]   copy_address 0                                                                        
    [0000000C]   push 32                                                                               JingleScript::ValueItem::Push
    [0000000D]    copy_data string [Scene Hierarchy] 32                                                JingleScript::Compiler::CompileConstant
    [0000000E]    call_method [EditorAttribute::ctor(string)] 6                                        JingleScript::Compiler::CompileFunctionCall
    [0000000F]   pop 32                                                                                JingleScript::ValueItem::Pop
    [00000010]   copy_address 0                                                                        
    [00000011]   push 32                                                                               JingleScript::ValueItem::Push
    [00000012]    copy_data string [Entity Properties] 32                                              JingleScript::Compiler::CompileConstant
    [00000013]    call_method [EditorAttribute::ctor(string)] 6                                        JingleScript::Compiler::CompileFunctionCall
    [00000014]   pop 32                                                                                JingleScript::ValueItem::Pop
    [00000015]   copy_address 0                                                                        
    [00000016]   call_method [Native::ctor()] 1                                                        JingleScript::Compiler::CompileFunctionCall
    [00000017]   copy_address 0                                                                        
    [00000018]   call_method [Native::ctor()] 1                                                        JingleScript::Compiler::CompileFunctionCall
    [00000019]   copy_address 0                                                                        
    [0000001A]   call_method [Native::ctor()] 1                                                        JingleScript::Compiler::CompileFunctionCall
    [0000001B]   copy_address 0                                                                        
    [0000001C]   call_method [Native::ctor()] 1                                                        JingleScript::Compiler::CompileFunctionCall
    [0000001D]   copy_address 0                                                                        
    [0000001E]   call_method [Native::ctor()] 1                                                        JingleScript::Compiler::CompileFunctionCall
    [0000001F]   copy_address 0                                                                        
    [00000020]   call_method [Native::ctor()] 1                                                        JingleScript::Compiler::CompileFunctionCall
    [00000021]   copy_address 0                                                                        
    [00000022]   call_method [Native::ctor()] 1                                                        JingleScript::Compiler::CompileFunctionCall
    [00000023]   copy_address 0                                                                        
    [00000024]   call_method [Native::ctor()] 1                                                        JingleScript::Compiler::CompileFunctionCall
    [00000025]   copy_address 0                                                                        
    [00000026]   call_method [Native::ctor()] 1                                                        JingleScript::Compiler::CompileFunctionCall
    [00000027]   copy_address 0                                                                        
    [00000028]   call_method [Native::ctor()] 1                                                        JingleScript::Compiler::CompileFunctionCall
    [00000029]   copy_address 0                                                                        
    [0000002A]   call_method [Native::ctor()] 1                                                        JingleScript::Compiler::CompileFunctionCall
    [0000002B]   copy_address 0                                                                        
    [0000002C]   call_method [Native::ctor()] 1                                                        JingleScript::Compiler::CompileFunctionCall
    [0000002D]   copy_address 0                                                                        
    [0000002E]   call_method [Native::ctor()] 1                                                        JingleScript::Compiler::CompileFunctionCall
    [0000002F]   copy_address 0                                                                        
    [00000030]   call_method [Native::ctor()] 1                                                        JingleScript::Compiler::CompileFunctionCall
    [00000031]   copy_address 0                                                                        
    [00000032]   call_method [Native::ctor()] 1                                                        JingleScript::Compiler::CompileFunctionCall
    [00000033]   copy_address 0                                                                        
    [00000034]   call_method [Native::ctor()] 1                                                        JingleScript::Compiler::CompileFunctionCall
    [00000035]   copy_address 0                                                                        
    [00000036]   call_method [Native::ctor()] 1                                                        JingleScript::Compiler::CompileFunctionCall
    [00000037]   copy_address 0                                                                        
    [00000038]   call_method [Native::ctor()] 1                                                        JingleScript::Compiler::CompileFunctionCall
    [00000039]  pop 8                                                                                  JingleScript::ValueItem::Pop
  }
}

struct null {

  null::dtor() (Native)

  null::ctor() (Native)

  bool null::operator==(Object) (Native)

  bool null::operator!=(Object) (Native)
}

class Managed extends Object {

  Managed::dtor() (Native)
}

class Attribute extends Object {

  Attribute::dtor() (Native)

  Attribute::ctor() {
    [00000000]  push 8                                                                                 JingleScript::ValueItem::Push
    [00000001]   copy 8 16 [this] 8                                                                    JingleScript::Compiler::CompileFunctionCall
    [00000002]   call_exact [Object::ctor()]                                                           JingleScript::Compiler::CompileFunctionCall
    [00000003]  pop 8                                                                                  JingleScript::ValueItem::Pop
  }
}

class Scene extends Object {

  Scene::dtor() (Native)

  Camera Scene::GetCamera() (Native)
}

class Camera extends Entity {

  Camera::dtor() (Native)
}

class Entity extends Object {
   double PositionX
   double PositionY
   double PositionZ

  Entity::dtor() (Native)
}

class PlanetQuadType extends MeshEntityType {

  PlanetQuadType::dtor() (Native)
}

class MeshEntityType extends EntityType {

  MeshEntityType::dtor() (Native)
}

class EntityType extends Object {

  EntityType::dtor() (Native)
}

class PlanetQuad extends MeshEntity {

  PlanetQuad::dtor() (Native)
}

class MeshEntity extends Entity {

  MeshEntity::dtor() (Native)
}

class PlanetType extends MeshEntityType {

  PlanetType::dtor() (Native)
}

class Planet extends MeshEntity {

  Planet::dtor() (Native)
}

class EntityComponent extends Object {

  EntityComponent::dtor() (Native)
}

class Texture extends Managed {

  Texture::dtor() (Native)
}

class Shader extends Asset {

  Shader::dtor() (Native)
}

class Asset extends Object {

  Asset::dtor() (Native)
}

class Renderer extends Module {

  Renderer::dtor() (Native)
}

class Mesh extends Asset {

  Mesh::dtor() (Native)
}

class Material extends Asset {

  Material::dtor() (Native)
}

class LightType extends EntityType {

  LightType::dtor() (Native)
}

class Light extends Entity {

  Light::dtor() (Native)
}

class Framebuffer extends Managed {

  Framebuffer::dtor() (Native)
}

class CameraType extends EntityType {

  CameraType::dtor() (Native)
}

class DebugType extends Object {

  DebugType::dtor() (Native)
}

class Debug extends Object {

  Debug::dtor() (Native)
}

class MeshComponent extends EntityComponent {

  MeshComponent::dtor() (Native)
}

class Viewport extends Managed {

  Viewport::dtor() (Native)
}

struct Vertex {

  Vertex::dtor() (Native)
}

class Image extends Asset {

  Image::dtor() (Native)
}

class WndWindow extends Window {

  WndWindow::dtor() (Native)
}

class Window extends Module {

  Window::dtor() (Native)
}

class Application extends Object {
   int FPS

  Scene Application::GetScene() (Native)

  Application::dtor() (Native)

  void Application::OnUpdate(double) {
  }
}

class BindingModule extends Module {

  BindingModule::dtor() (Native)
}

class SceneHierarchyPanel extends EditorPanelBase {

  SceneHierarchyPanel::dtor() (Native)
}

class EditorPanelBase extends Object {

  EditorPanelBase::dtor() (Native)

  void EditorPanelBase::Close() (Native)

  void EditorPanelBase::OnEndRender(double) (Native)

  void EditorPanelBase::OnBeginRender(double) (Native)

  void EditorPanelBase::OnRender(double) (Native)

  EditorModule EditorPanelBase::GetEditor() (Native)
}

class EditorModule extends Module {

  EditorModule::dtor() (Native)
}

class EntityPropertiesPanel extends EditorPanelBase {

  EntityPropertiesPanel::dtor() (Native)
}

class EditorViewportPanel extends EditorPanelBase {

  EditorViewportPanel::dtor() (Native)
}

class EditorAttribute extends Attribute {
   string m_Title

  EditorAttribute::dtor() (Native)

  EditorAttribute::ctor(string) (Native)
}

class AssetModule extends Module {

  AssetModule::dtor() (Native)
}

class Type extends Object {

  bool Type::IsInherited(Type) (Native)
}

class Type extends Object {

  bool Type::IsInherited(Type) (Native)
}

class Native extends Attribute {

  Native::ctor() {
    [00000000]  push 8                                                                                 JingleScript::ValueItem::Push
    [00000001]   copy 8 16 [this] 8                                                                    JingleScript::Compiler::CompileFunctionCall
    [00000002]   call_exact [Attribute::ctor()]                                                        JingleScript::Compiler::CompileFunctionCall
    [00000003]  pop 8                                                                                  JingleScript::ValueItem::Pop
  }
}

class ScriptTestPanel extends EditorPanelBase {

  void ScriptTestPanel::OnRender(double) {
    [00000000]  push 8                                                                                 JingleScript::ValueItem::Push
    [00000001]   push 8                                                                                JingleScript::ValueItem::PushAfter
    [00000002]    push 8                                                                               JingleScript::ValueItem::PushAt
    [00000003]     call_function [Application GetApplication()]                                        JingleScript::Compiler::CompileFunctionCall
    [00000004]     copy 8 8 24 [app]                                                                   JingleScript::Compiler::CompileVariableScope
    [00000005]    pop 8                                                                                JingleScript::ValueItem::Pop
    [00000006]    push 32                                                                              JingleScript::ValueItem::Push
    [00000007]     copy_data string [This is jingle script] 32                                         JingleScript::Compiler::CompileConstant
    [00000008]     call_function [void ImGui_Text(string)]                                             JingleScript::Compiler::CompileFunctionCall
    [00000009]    pop 32                                                                               JingleScript::ValueItem::Pop
    [0000000A]    push 32                                                                              JingleScript::ValueItem::Push
    [0000000B]     copy_data string [DeltaTime: ] 32                                                   JingleScript::Compiler::CompileConstant
    [0000000C]     push 8                                                                              JingleScript::ValueItem::PushAfter
    [0000000D]      copy 8 64 [DeltaTime] 8                                                            JingleScript::Compiler::CompileValue
    [0000000E]      call_exact [string string::operator+(double)]                                      JingleScript::HandleArithmeticOperator
    [0000000F]     pop 8                                                                               JingleScript::ValueItem::Pop
    [00000010]     call_function [void ImGui_Text(string)]                                             JingleScript::Compiler::CompileFunctionCall
    [00000011]    pop 32                                                                               JingleScript::ValueItem::Pop
    [00000012]    push 32                                                                              JingleScript::ValueItem::Push
    [00000013]     copy_data string [FPS: ] 32                                                         JingleScript::Compiler::CompileConstant
    [00000014]     push 8                                                                              JingleScript::ValueItem::PushAfter
    [00000015]      copy 8 56 [app] 8                                                                  JingleScript::Compiler::CompileValue
    [00000016]      copy_variable_from_object 8 32 [FPS] 8                                             JingleScript::Compiler::CompileValue
    [00000017]      resize -4                                                                          JingleScript::ValueItem::Resize
    [00000018]      call_exact [string string::operator+(int)]                                         JingleScript::HandleArithmeticOperator
    [00000019]     pop 4                                                                               JingleScript::ValueItem::Pop
    [0000001A]     call_function [void ImGui_Text(string)]                                             JingleScript::Compiler::CompileFunctionCall
    [0000001B]    pop 32                                                                               JingleScript::ValueItem::Pop
    [0000001C]    push 1                                                                               JingleScript::ValueItem::Push
    [0000001D]     push 1                                                                              JingleScript::ValueItem::PushAfter
    [0000001E]      push 1                                                                             JingleScript::ValueItem::PushAt
    [0000001F]       call_function [bool ImGui_WantCaptureKeyboard()]                                  JingleScript::Compiler::CompileFunctionCall
    [00000020]       copy 1 1 3 [b1]                                                                   JingleScript::Compiler::CompileVariableScope
    [00000021]       destructor [bool]                                                                 JingleScript::ValueItem::Pop
    [00000022]      pop 1                                                                              JingleScript::ValueItem::Pop
    [00000023]      push 1                                                                             JingleScript::ValueItem::Push
    [00000024]       push 1                                                                            JingleScript::ValueItem::PushAfter
    [00000025]        push 1                                                                           JingleScript::ValueItem::PushAt
    [00000026]         call_function [bool ImGui_WantCaptureMouse()]                                   JingleScript::Compiler::CompileFunctionCall
    [00000027]         copy 1 1 3 [b2]                                                                 JingleScript::Compiler::CompileVariableScope
    [00000028]         destructor [bool]                                                               JingleScript::ValueItem::Pop
    [00000029]        pop 1                                                                            JingleScript::ValueItem::Pop
    [0000002A]        push 32                                                                          JingleScript::ValueItem::Push
    [0000002B]         copy_data string [WantCaptureKeyboard: ] 32                                     JingleScript::Compiler::CompileConstant
    [0000002C]         push 1                                                                          JingleScript::ValueItem::PushAfter
    [0000002D]          copy 1 37 [b1] 1                                                               JingleScript::Compiler::CompileValue
    [0000002E]          call_exact [string string::operator+(bool)]                                    JingleScript::HandleArithmeticOperator
    [0000002F]         pop 1                                                                           JingleScript::ValueItem::Pop
    [00000030]         call_function [void ImGui_Text(string)]                                         JingleScript::Compiler::CompileFunctionCall
    [00000031]        pop 32                                                                           JingleScript::ValueItem::Pop
    [00000032]        push 32                                                                          JingleScript::ValueItem::Push
    [00000033]         copy_data string [WantCaptureMouse: ] 32                                        JingleScript::Compiler::CompileConstant
    [00000034]         push 1                                                                          JingleScript::ValueItem::PushAfter
    [00000035]          copy 1 35 [b2] 1                                                               JingleScript::Compiler::CompileValue
    [00000036]          call_exact [string string::operator+(bool)]                                    JingleScript::HandleArithmeticOperator
    [00000037]         pop 1                                                                           JingleScript::ValueItem::Pop
    [00000038]         call_function [void ImGui_Text(string)]                                         JingleScript::Compiler::CompileFunctionCall
    [00000039]        pop 32                                                                           JingleScript::ValueItem::Pop
    [0000003A]        push 8                                                                           JingleScript::ValueItem::Push
    [0000003B]         push 8                                                                          JingleScript::ValueItem::PushAfter
    [0000003C]          copy 8 36 [app] 8                                                              JingleScript::Compiler::CompileValue
    [0000003D]          call_method [Scene Application::GetScene()] 6                                  JingleScript::Compiler::CompileFunctionCall
    [0000003E]          copy 8 8 16 [scene]                                                            JingleScript::Compiler::CompileVariableScope
    [0000003F]         pop 8                                                                           JingleScript::ValueItem::Pop
    [00000040]         push 8                                                                          JingleScript::ValueItem::PushAfter
    [00000041]          copy 8 16 [scene] 8                                                            JingleScript::Compiler::CompileValue
    [00000042]          call_function [void ImGui_Text(Object)]                                        JingleScript::Compiler::CompileFunctionCall
    [00000043]         pop 8                                                                           JingleScript::ValueItem::Pop
    [00000044]         push 8                                                                          JingleScript::ValueItem::Push
    [00000045]          push 8                                                                         JingleScript::ValueItem::PushAfter
    [00000046]           copy 8 24 [scene] 8                                                           JingleScript::Compiler::CompileValue
    [00000047]           call_method [Camera Scene::GetCamera()] 6                                     JingleScript::Compiler::CompileFunctionCall
    [00000048]           copy 8 8 16 [camera]                                                          JingleScript::Compiler::CompileVariableScope
    [00000049]          pop 8                                                                          JingleScript::ValueItem::Pop
    [0000004A]          push 8                                                                         JingleScript::ValueItem::PushAfter
    [0000004B]           copy 8 16 [camera] 8                                                          JingleScript::Compiler::CompileValue
    [0000004C]           call_function [void ImGui_Text(Object)]                                       JingleScript::Compiler::CompileFunctionCall
    [0000004D]          pop 8                                                                          JingleScript::ValueItem::Pop
    [0000004E]          push 8                                                                         JingleScript::ValueItem::Push
    [0000004F]           push 8                                                                        JingleScript::ValueItem::PushAfter
    [00000050]            copy 8 24 [camera] 8                                                         JingleScript::Compiler::CompileValue
    [00000051]            copy_variable_from_object 8 312 [PositionX] 8                                JingleScript::Compiler::CompileValue
    [00000052]            copy 8 8 16 [x]                                                              JingleScript::Compiler::CompileVariableScope
    [00000053]           pop 8                                                                         JingleScript::ValueItem::Pop
    [00000054]           push 8                                                                        JingleScript::ValueItem::Push
    [00000055]            push 8                                                                       JingleScript::ValueItem::PushAfter
    [00000056]             copy 8 32 [camera] 8                                                        JingleScript::Compiler::CompileValue
    [00000057]             copy_variable_from_object 8 320 [PositionY] 8                               JingleScript::Compiler::CompileValue
    [00000058]             copy 8 8 16 [y]                                                             JingleScript::Compiler::CompileVariableScope
    [00000059]            pop 8                                                                        JingleScript::ValueItem::Pop
    [0000005A]            push 8                                                                       JingleScript::ValueItem::Push
    [0000005B]             push 8                                                                      JingleScript::ValueItem::PushAfter
    [0000005C]              copy 8 40 [camera] 8                                                       JingleScript::Compiler::CompileValue
    [0000005D]              copy_variable_from_object 8 328 [PositionZ] 8                              JingleScript::Compiler::CompileValue
    [0000005E]              copy 8 8 16 [z]                                                            JingleScript::Compiler::CompileVariableScope
    [0000005F]             pop 8                                                                       JingleScript::ValueItem::Pop
    [00000060]             push 32                                                                     JingleScript::ValueItem::Push
    [00000061]              copy_data string [PositionX: ] 32                                          JingleScript::Compiler::CompileConstant
    [00000062]              push 8                                                                     JingleScript::ValueItem::PushAfter
    [00000063]               copy 8 64 [x] 8                                                           JingleScript::Compiler::CompileValue
    [00000064]               call_exact [string string::operator+(double)]                             JingleScript::HandleArithmeticOperator
    [00000065]              pop 8                                                                      JingleScript::ValueItem::Pop
    [00000066]              call_function [void ImGui_Text(string)]                                    JingleScript::Compiler::CompileFunctionCall
    [00000067]             pop 32                                                                      JingleScript::ValueItem::Pop
    [00000068]             push 32                                                                     JingleScript::ValueItem::Push
    [00000069]              copy_data string [PositionY: ] 32                                          JingleScript::Compiler::CompileConstant
    [0000006A]              push 8                                                                     JingleScript::ValueItem::PushAfter
    [0000006B]               copy 8 56 [y] 8                                                           JingleScript::Compiler::CompileValue
    [0000006C]               call_exact [string string::operator+(double)]                             JingleScript::HandleArithmeticOperator
    [0000006D]              pop 8                                                                      JingleScript::ValueItem::Pop
    [0000006E]              call_function [void ImGui_Text(string)]                                    JingleScript::Compiler::CompileFunctionCall
    [0000006F]             pop 32                                                                      JingleScript::ValueItem::Pop
    [00000070]             push 32                                                                     JingleScript::ValueItem::Push
    [00000071]              copy_data string [PositionZ: ] 32                                          JingleScript::Compiler::CompileConstant
    [00000072]              push 8                                                                     JingleScript::ValueItem::PushAfter
    [00000073]               copy 8 48 [z] 8                                                           JingleScript::Compiler::CompileValue
    [00000074]               call_exact [string string::operator+(double)]                             JingleScript::HandleArithmeticOperator
    [00000075]              pop 8                                                                      JingleScript::ValueItem::Pop
    [00000076]              call_function [void ImGui_Text(string)]                                    JingleScript::Compiler::CompileFunctionCall
    [00000077]             pop 32                                                                      JingleScript::ValueItem::Pop
    [00000078]             destructor [double]                                                         JingleScript::ValueItem::Pop
    [00000079]            pop 8                                                                        JingleScript::ValueItem::Pop
    [0000007A]            destructor [double]                                                          JingleScript::ValueItem::Pop
    [0000007B]           pop 8                                                                         JingleScript::ValueItem::Pop
    [0000007C]           destructor [double]                                                           JingleScript::ValueItem::Pop
    [0000007D]          pop 8                                                                          JingleScript::ValueItem::Pop
    [0000007E]         pop 8                                                                           JingleScript::ValueItem::Pop
    [0000007F]        pop 8                                                                            JingleScript::ValueItem::Pop
    [00000080]        destructor [bool]                                                                JingleScript::ValueItem::Pop
    [00000081]       pop 1                                                                             JingleScript::ValueItem::Pop
    [00000082]       destructor [bool]                                                                 JingleScript::ValueItem::Pop
    [00000083]      pop 1                                                                              JingleScript::ValueItem::Pop
    [00000084]      destructor [bool]                                                                  JingleScript::ValueItem::Pop
    [00000085]     pop 1                                                                               JingleScript::ValueItem::Pop
    [00000086]     destructor [bool]                                                                   JingleScript::ValueItem::Pop
    [00000087]    pop 1                                                                                JingleScript::ValueItem::Pop
    [00000088]   pop 8                                                                                 JingleScript::ValueItem::Pop
    [00000089]  pop 8                                                                                  JingleScript::ValueItem::Pop
  }
}
