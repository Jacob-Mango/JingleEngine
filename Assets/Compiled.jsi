
class TestModule extends Module {

  void TestModule::~TestModule() (Native)
}

class Module extends Object {

  void Module::~Module() (Native)
}

class Object {

  bool Object::operator!=(Object) (Native)

  void Object::~Object() (Native)

  string Object::ToString() (Native)

  Type Object::GetType() (Native)

  bool Object::operator==(Object) (Native)
}

class string {

  void string::~string() (Native)

  string string::operator+(int) (Native)

  string string::operator+(float) (Native)

  string string::operator+(bool) (Native)

  string string::operator+(byte) (Native)

  void string::operator=(string) (Native)

  string string::operator+(string) (Native)

  string string::operator+(double) (Native)

  bool string::operator>(string) (Native)

  bool string::operator>=(string) (Native)

  bool string::operator<(string) (Native)

  bool string::operator<=(string) (Native)

  bool string::operator==(string) (Native)

  bool string::operator!=(string) (Native)
}

class bool {
   bool value

  bool bool::operator>(bool) (Native)

  bool bool::operator>=(double) (Native)

  void bool::~bool() (Native)

  bool bool::operator==(bool) (Native)

  void bool::operator=(bool) (Native)

  bool bool::operator>=(bool) (Native)

  bool bool::operator!=(bool) (Native)

  bool bool::operator<(bool) (Native)

  bool bool::operator!=(int) (Native)

  bool bool::operator<=(bool) (Native)

  void bool::operator=(byte) (Native)

  bool bool::operator>(byte) (Native)

  bool bool::operator>=(byte) (Native)

  bool bool::operator>(float) (Native)

  bool bool::operator<(byte) (Native)

  bool bool::operator<=(byte) (Native)

  bool bool::operator==(byte) (Native)

  bool bool::operator<=(int) (Native)

  bool bool::operator!=(byte) (Native)

  void bool::operator=(double) (Native)

  bool bool::operator>(double) (Native)

  bool bool::operator<(double) (Native)

  bool bool::operator==(float) (Native)

  bool bool::operator<=(double) (Native)

  bool bool::operator==(double) (Native)

  bool bool::operator!=(double) (Native)

  void bool::operator=(float) (Native)

  bool bool::operator>=(float) (Native)

  bool bool::operator>=(int) (Native)

  bool bool::operator<(float) (Native)

  bool bool::operator<=(float) (Native)

  bool bool::operator!=(float) (Native)

  void bool::operator=(int) (Native)

  bool bool::operator>(int) (Native)

  bool bool::operator<(int) (Native)

  bool bool::operator==(int) (Native)

  string bool::operator+(string) (Native)
}

class byte {
   byte value

  bool byte::operator!=(bool) (Native)

  bool byte::operator<(bool) (Native)

  void byte::operator=(bool) (Native)

  void byte::operator=(float) (Native)

  void byte::~byte() (Native)

  byte byte::operator+(double) (Native)

  bool byte::operator>(bool) (Native)

  bool byte::operator>=(bool) (Native)

  bool byte::operator!=(int) (Native)

  byte byte::operator-(float) (Native)

  bool byte::operator<=(bool) (Native)

  byte byte::operator-(double) (Native)

  bool byte::operator==(bool) (Native)

  byte byte::operator*(byte) (Native)

  byte byte::operator/(byte) (Native)

  bool byte::operator<=(float) (Native)

  byte byte::operator+(byte) (Native)

  byte byte::operator/(float) (Native)

  byte byte::operator-(byte) (Native)

  bool byte::operator<=(byte) (Native)

  byte byte::operator%(byte) (Native)

  bool byte::operator>=(double) (Native)

  void byte::operator=(byte) (Native)

  bool byte::operator>(byte) (Native)

  bool byte::operator>=(byte) (Native)

  bool byte::operator>(float) (Native)

  bool byte::operator<(byte) (Native)

  bool byte::operator==(byte) (Native)

  bool byte::operator<=(int) (Native)

  byte byte::operator%(int) (Native)

  bool byte::operator!=(byte) (Native)

  byte byte::operator*(double) (Native)

  byte byte::operator/(double) (Native)

  void byte::operator=(double) (Native)

  bool byte::operator>(double) (Native)

  bool byte::operator<(double) (Native)

  bool byte::operator==(float) (Native)

  bool byte::operator<=(double) (Native)

  bool byte::operator==(double) (Native)

  bool byte::operator!=(double) (Native)

  byte byte::operator*(float) (Native)

  byte byte::operator+(float) (Native)

  bool byte::operator>=(float) (Native)

  bool byte::operator>=(int) (Native)

  bool byte::operator<(float) (Native)

  byte byte::operator+(int) (Native)

  bool byte::operator!=(float) (Native)

  byte byte::operator*(int) (Native)

  byte byte::operator/(int) (Native)

  byte byte::operator-(int) (Native)

  string byte::operator+(string) (Native)

  void byte::operator=(int) (Native)

  bool byte::operator>(int) (Native)

  bool byte::operator<(int) (Native)

  bool byte::operator==(int) (Native)
}

class double {
   double value

  double double::operator+(int) (Native)

  bool double::operator>=(bool) (Native)

  bool double::operator==(double) (Native)

  void double::~double() (Native)

  void double::operator=(bool) (Native)

  double double::operator/(float) (Native)

  double double::operator-(byte) (Native)

  bool double::operator>(bool) (Native)

  bool double::operator!=(bool) (Native)

  double double::operator-(float) (Native)

  bool double::operator<(bool) (Native)

  bool double::operator!=(int) (Native)

  void double::operator=(double) (Native)

  bool double::operator<=(bool) (Native)

  bool double::operator==(bool) (Native)

  double double::operator*(byte) (Native)

  bool double::operator==(float) (Native)

  bool double::operator<=(double) (Native)

  double double::operator/(byte) (Native)

  bool double::operator>=(int) (Native)

  bool double::operator<(float) (Native)

  double double::operator+(byte) (Native)

  void double::operator=(byte) (Native)

  bool double::operator>(byte) (Native)

  bool double::operator>=(byte) (Native)

  bool double::operator>(float) (Native)

  bool double::operator<(byte) (Native)

  bool double::operator<=(byte) (Native)

  double double::operator+(float) (Native)

  bool double::operator==(byte) (Native)

  bool double::operator<=(int) (Native)

  bool double::operator!=(byte) (Native)

  double double::operator*(double) (Native)

  double double::operator/(double) (Native)

  string double::operator+(string) (Native)

  double double::operator+(double) (Native)

  double double::operator-(double) (Native)

  bool double::operator>(double) (Native)

  bool double::operator>=(double) (Native)

  bool double::operator<(double) (Native)

  double double::operator/(int) (Native)

  bool double::operator!=(double) (Native)

  double double::operator*(float) (Native)

  void double::operator=(float) (Native)

  bool double::operator>=(float) (Native)

  bool double::operator<=(float) (Native)

  bool double::operator!=(float) (Native)

  double double::operator*(int) (Native)

  double double::operator-(int) (Native)

  void double::operator=(int) (Native)

  bool double::operator>(int) (Native)

  bool double::operator<(int) (Native)

  bool double::operator==(int) (Native)
}

class float {
   float value

  bool float::operator>(bool) (Native)

  void float::~float() (Native)

  bool float::operator==(bool) (Native)

  void float::operator=(bool) (Native)

  bool float::operator>=(bool) (Native)

  bool float::operator!=(bool) (Native)

  float float::operator/(double) (Native)

  bool float::operator<(bool) (Native)

  bool float::operator!=(int) (Native)

  bool float::operator<=(bool) (Native)

  float float::operator*(byte) (Native)

  float float::operator/(byte) (Native)

  bool float::operator<=(byte) (Native)

  float float::operator+(byte) (Native)

  float float::operator/(float) (Native)

  float float::operator-(byte) (Native)

  void float::operator=(byte) (Native)

  bool float::operator>(byte) (Native)

  bool float::operator>=(byte) (Native)

  bool float::operator>(float) (Native)

  bool float::operator<(byte) (Native)

  bool float::operator==(byte) (Native)

  bool float::operator<=(int) (Native)

  float float::operator+(int) (Native)

  bool float::operator!=(byte) (Native)

  float float::operator*(double) (Native)

  bool float::operator==(float) (Native)

  bool float::operator<=(double) (Native)

  float float::operator+(double) (Native)

  float float::operator-(double) (Native)

  void float::operator=(double) (Native)

  void float::operator=(int) (Native)

  bool float::operator>(double) (Native)

  bool float::operator>=(double) (Native)

  bool float::operator<(double) (Native)

  float float::operator*(int) (Native)

  bool float::operator==(double) (Native)

  bool float::operator!=(double) (Native)

  float float::operator*(float) (Native)

  bool float::operator<=(float) (Native)

  float float::operator+(float) (Native)

  float float::operator-(float) (Native)

  void float::operator=(float) (Native)

  bool float::operator>=(float) (Native)

  bool float::operator>=(int) (Native)

  bool float::operator<(float) (Native)

  bool float::operator!=(float) (Native)

  float float::operator/(int) (Native)

  float float::operator-(int) (Native)

  bool float::operator>(int) (Native)

  bool float::operator<(int) (Native)

  bool float::operator==(int) (Native)

  string float::operator+(string) (Native)
}

class int {
   int value

  bool int::operator!=(int) (Native)

  bool int::operator<=(bool) (Native)

  string int::operator+(string) (Native)

  int int::operator+(int) (Native)

  void int::~int() (Native)

  void int::operator=(float) (Native)

  bool int::operator>(bool) (Native)

  void int::operator=(bool) (Native)

  bool int::operator>=(bool) (Native)

  bool int::operator!=(bool) (Native)

  bool int::operator<(bool) (Native)

  bool int::operator==(bool) (Native)

  int int::operator*(byte) (Native)

  int int::operator/(byte) (Native)

  bool int::operator>=(double) (Native)

  int int::operator+(byte) (Native)

  int int::operator/(float) (Native)

  int int::operator-(byte) (Native)

  int int::operator%(byte) (Native)

  bool int::operator==(float) (Native)

  bool int::operator<=(double) (Native)

  void int::operator=(byte) (Native)

  bool int::operator>(byte) (Native)

  bool int::operator>=(byte) (Native)

  bool int::operator>(float) (Native)

  bool int::operator<(byte) (Native)

  bool int::operator<=(byte) (Native)

  bool int::operator==(byte) (Native)

  bool int::operator<=(int) (Native)

  bool int::operator!=(byte) (Native)

  bool int::operator>=(int) (Native)

  bool int::operator<(float) (Native)

  int int::operator*(double) (Native)

  int int::operator/(double) (Native)

  int int::operator+(double) (Native)

  int int::operator-(double) (Native)

  int int::operator/(int) (Native)

  void int::operator=(double) (Native)

  bool int::operator>(double) (Native)

  int int::operator%(int) (Native)

  bool int::operator<(double) (Native)

  bool int::operator==(double) (Native)

  void int::operator=(int) (Native)

  bool int::operator!=(double) (Native)

  int int::operator*(float) (Native)

  int int::operator+(float) (Native)

  int int::operator-(float) (Native)

  bool int::operator>=(float) (Native)

  bool int::operator<=(float) (Native)

  bool int::operator!=(float) (Native)

  int int::operator*(int) (Native)

  int int::operator-(int) (Native)

  bool int::operator>(int) (Native)

  bool int::operator<(int) (Native)

  bool int::operator==(int) (Native)
}

class #global extends Object {

  void ImGui_Text(string) (Native)

  void #global::~#global() (Native)

  void ImGui_End() (Native)

  Application GetApplication() (Native)

  bool ImGui_WantCaptureMouse() (Native)

  bool ImGui_WantCaptureKeyboard() (Native)

  bool ImGui_Begin(string) (Native)
}

class null {

  void null::~null() (Native)

  bool null::operator==(Object) (Native)

  bool null::operator!=(Object) (Native)
}

class Managed extends Object {

  void Managed::~Managed() (Native)
}

class Attribute extends Object {

  void Attribute::~Attribute() (Native)
}

class Scene extends Managed {

  void Scene::~Scene() (Native)

  void Scene::GetCamera() (Native)

  Camera Scene::GetCamera() (Native)
}

class PlanetQuadType extends MeshEntityType {

  void PlanetQuadType::~PlanetQuadType() (Native)
}

class MeshEntityType extends EntityType {

  void MeshEntityType::~MeshEntityType() (Native)
}

class EntityType extends Object {

  void EntityType::~EntityType() (Native)
}

class PlanetQuad extends MeshEntity {

  void PlanetQuad::~PlanetQuad() (Native)
}

class MeshEntity extends Entity {

  void MeshEntity::~MeshEntity() (Native)
}

class Entity extends Object {
   double PositionX
   double PositionY
   double PositionZ

  void Entity::~Entity() (Native)
}

class PlanetType extends MeshEntityType {

  void PlanetType::~PlanetType() (Native)
}

class Planet extends MeshEntity {

  void Planet::~Planet() (Native)
}

class EntityComponent extends Object {

  void EntityComponent::~EntityComponent() (Native)
}

class Texture extends Asset {

  void Texture::~Texture() (Native)
}

class Asset extends Managed {

  void Asset::~Asset() (Native)
}

class Shader extends Asset {

  void Shader::~Shader() (Native)
}

class Renderer extends Module {

  void Renderer::~Renderer() (Native)
}

class Mesh extends Asset {

  void Mesh::~Mesh() (Native)
}

class Material extends Asset {

  void Material::~Material() (Native)
}

class LightType extends EntityType {

  void LightType::~LightType() (Native)
}

class Light extends Entity {

  void Light::~Light() (Native)
}

class CameraType extends EntityType {

  void CameraType::~CameraType() (Native)
}

class Camera extends Entity {

  void Camera::~Camera() (Native)
}

class DebugType extends MeshEntityType {

  void DebugType::~DebugType() (Native)
}

class Debug extends MeshEntity {

  void Debug::~Debug() (Native)
}

class MeshComponent extends EntityComponent {

  void MeshComponent::~MeshComponent() (Native)
}

class Vertex {

  void Vertex::~Vertex() (Native)
}

class WndWindow extends Window {

  void WndWindow::~WndWindow() (Native)
}

class Window extends Module {

  void Window::~Window() (Native)
}

class Application extends Object {
   int FPS

  void Application::~Application() (Native)

  Scene Application::GetScene() (Native)

  void Application::OnUpdate(double) {
    [00000000]  push 1                                                                                 JingleScript::ValueItem::PushAfter
    [00000001]   push 1                                                                                JingleScript::ValueItem::PushAt
    [00000002]    push 32                                                                              JingleScript::ValueItem::Push
    [00000003]     copy_data string [Test] 32                                                          JingleScript::Compiler::CompileConstant
    [00000004]     call_function [bool ImGui_Begin(string)]                                            JingleScript::Compiler::CompileFunctionCall
    [00000005]    pop 32                                                                               JingleScript::ValueItem::Pop
    [00000006]    destructor [bool]                                                                    JingleScript::ValueItem::Pop
    [00000007]   pop 1                                                                                 JingleScript::ValueItem::Pop
    [00000008]   push 32                                                                               JingleScript::ValueItem::Push
    [00000009]    copy_data string [This is jingle script] 32                                          JingleScript::Compiler::CompileConstant
    [0000000A]    call_function [void ImGui_Text(string)]                                              JingleScript::Compiler::CompileFunctionCall
    [0000000B]   pop 32                                                                                JingleScript::ValueItem::Pop
    [0000000C]   push 32                                                                               JingleScript::ValueItem::Push
    [0000000D]    copy_data string [DeltaTime: ] 32                                                    JingleScript::Compiler::CompileConstant
    [0000000E]    push 8                                                                               JingleScript::ValueItem::PushAfter
    [0000000F]     copy 8 49 [DeltaTime] 8                                                             JingleScript::Compiler::CompileValue
    [00000010]     call_exact [string string::operator+(double)]                                       JingleScript::HandleArithmeticOperator
    [00000011]    pop 8                                                                                JingleScript::ValueItem::Pop
    [00000012]    call_function [void ImGui_Text(string)]                                              JingleScript::Compiler::CompileFunctionCall
    [00000013]   pop 32                                                                                JingleScript::ValueItem::Pop
    [00000014]   push 32                                                                               JingleScript::ValueItem::Push
    [00000015]    copy_data string [FPS: ] 32                                                          JingleScript::Compiler::CompileConstant
    [00000016]    push 8                                                                               JingleScript::ValueItem::PushAfter
    [00000017]     copy 8 57 [this] 8                                                                  JingleScript::Compiler::CompileValue
    [00000018]     copy_variable_from_object 8 32 [FPS] 8                                              JingleScript::Compiler::CompileValue
    [00000019]     resize -4                                                                           JingleScript::ValueItem::Resize
    [0000001A]     call_exact [string string::operator+(int)]                                          JingleScript::HandleArithmeticOperator
    [0000001B]    pop 4                                                                                JingleScript::ValueItem::Pop
    [0000001C]    call_function [void ImGui_Text(string)]                                              JingleScript::Compiler::CompileFunctionCall
    [0000001D]   pop 32                                                                                JingleScript::ValueItem::Pop
    [0000001E]   push 1                                                                                JingleScript::ValueItem::Push
    [0000001F]    push 1                                                                               JingleScript::ValueItem::PushAfter
    [00000020]     push 1                                                                              JingleScript::ValueItem::PushAt
    [00000021]      call_function [bool ImGui_WantCaptureKeyboard()]                                   JingleScript::Compiler::CompileFunctionCall
    [00000022]      copy 1 1 3 [b1]                                                                    JingleScript::Compiler::CompileVariableScope
    [00000023]      destructor [bool]                                                                  JingleScript::ValueItem::Pop
    [00000024]     pop 1                                                                               JingleScript::ValueItem::Pop
    [00000025]     push 1                                                                              JingleScript::ValueItem::Push
    [00000026]      push 1                                                                             JingleScript::ValueItem::PushAfter
    [00000027]       push 1                                                                            JingleScript::ValueItem::PushAt
    [00000028]        call_function [bool ImGui_WantCaptureMouse()]                                    JingleScript::Compiler::CompileFunctionCall
    [00000029]        copy 1 1 3 [b2]                                                                  JingleScript::Compiler::CompileVariableScope
    [0000002A]        destructor [bool]                                                                JingleScript::ValueItem::Pop
    [0000002B]       pop 1                                                                             JingleScript::ValueItem::Pop
    [0000002C]       push 32                                                                           JingleScript::ValueItem::Push
    [0000002D]        copy_data string [WantCaptureKeyboard: ] 32                                      JingleScript::Compiler::CompileConstant
    [0000002E]        push 1                                                                           JingleScript::ValueItem::PushAfter
    [0000002F]         copy 1 37 [b1] 1                                                                JingleScript::Compiler::CompileValue
    [00000030]         call_exact [string string::operator+(bool)]                                     JingleScript::HandleArithmeticOperator
    [00000031]        pop 1                                                                            JingleScript::ValueItem::Pop
    [00000032]        call_function [void ImGui_Text(string)]                                          JingleScript::Compiler::CompileFunctionCall
    [00000033]       pop 32                                                                            JingleScript::ValueItem::Pop
    [00000034]       push 32                                                                           JingleScript::ValueItem::Push
    [00000035]        copy_data string [WantCaptureMouse: ] 32                                         JingleScript::Compiler::CompileConstant
    [00000036]        push 1                                                                           JingleScript::ValueItem::PushAfter
    [00000037]         copy 1 35 [b2] 1                                                                JingleScript::Compiler::CompileValue
    [00000038]         call_exact [string string::operator+(bool)]                                     JingleScript::HandleArithmeticOperator
    [00000039]        pop 1                                                                            JingleScript::ValueItem::Pop
    [0000003A]        call_function [void ImGui_Text(string)]                                          JingleScript::Compiler::CompileFunctionCall
    [0000003B]       pop 32                                                                            JingleScript::ValueItem::Pop
    [0000003C]       push 8                                                                            JingleScript::ValueItem::Push
    [0000003D]        push 8                                                                           JingleScript::ValueItem::PushAfter
    [0000003E]         copy 8 37 [this] 8                                                              JingleScript::Compiler::CompileValue
    [0000003F]         call_method [Scene Application::GetScene()] 6                                   JingleScript::Compiler::CompileFunctionCall
    [00000040]         copy 8 8 16 [scene]                                                             JingleScript::Compiler::CompileVariableScope
    [00000041]        pop 8                                                                            JingleScript::ValueItem::Pop
    [00000042]        push 8                                                                           JingleScript::ValueItem::Push
    [00000043]         push 8                                                                          JingleScript::ValueItem::PushAfter
    [00000044]          copy 8 24 [scene] 8                                                            JingleScript::Compiler::CompileValue
    [00000045]          call_method [void Scene::GetCamera()] 7                                        JingleScript::Compiler::CompileFunctionCall
    [00000046]          copy 8 8 16 [camera]                                                           JingleScript::Compiler::CompileVariableScope
    [00000047]         pop 8                                                                           JingleScript::ValueItem::Pop
    [00000048]         push 8                                                                          JingleScript::ValueItem::Push
    [00000049]          push 8                                                                         JingleScript::ValueItem::PushAfter
    [0000004A]           copy 8 24 [camera] 8                                                          JingleScript::Compiler::CompileValue
    [0000004B]           copy_variable_from_object 8 312 [PositionX] 8                                 JingleScript::Compiler::CompileValue
    [0000004C]           copy 8 8 16 [x]                                                               JingleScript::Compiler::CompileVariableScope
    [0000004D]          pop 8                                                                          JingleScript::ValueItem::Pop
    [0000004E]          push 8                                                                         JingleScript::ValueItem::Push
    [0000004F]           push 8                                                                        JingleScript::ValueItem::PushAfter
    [00000050]            copy 8 32 [camera] 8                                                         JingleScript::Compiler::CompileValue
    [00000051]            copy_variable_from_object 8 320 [PositionY] 8                                JingleScript::Compiler::CompileValue
    [00000052]            copy 8 8 16 [y]                                                              JingleScript::Compiler::CompileVariableScope
    [00000053]           pop 8                                                                         JingleScript::ValueItem::Pop
    [00000054]           push 8                                                                        JingleScript::ValueItem::Push
    [00000055]            push 8                                                                       JingleScript::ValueItem::PushAfter
    [00000056]             copy 8 40 [camera] 8                                                        JingleScript::Compiler::CompileValue
    [00000057]             copy_variable_from_object 8 328 [PositionZ] 8                               JingleScript::Compiler::CompileValue
    [00000058]             copy 8 8 16 [z]                                                             JingleScript::Compiler::CompileVariableScope
    [00000059]            pop 8                                                                        JingleScript::ValueItem::Pop
    [0000005A]            push 32                                                                      JingleScript::ValueItem::Push
    [0000005B]             copy_data string [PositionX: ] 32                                           JingleScript::Compiler::CompileConstant
    [0000005C]             push 8                                                                      JingleScript::ValueItem::PushAfter
    [0000005D]              copy 8 64 [x] 8                                                            JingleScript::Compiler::CompileValue
    [0000005E]              call_exact [string string::operator+(double)]                              JingleScript::HandleArithmeticOperator
    [0000005F]             pop 8                                                                       JingleScript::ValueItem::Pop
    [00000060]             call_function [void ImGui_Text(string)]                                     JingleScript::Compiler::CompileFunctionCall
    [00000061]            pop 32                                                                       JingleScript::ValueItem::Pop
    [00000062]            push 32                                                                      JingleScript::ValueItem::Push
    [00000063]             copy_data string [PositionY: ] 32                                           JingleScript::Compiler::CompileConstant
    [00000064]             push 8                                                                      JingleScript::ValueItem::PushAfter
    [00000065]              copy 8 56 [y] 8                                                            JingleScript::Compiler::CompileValue
    [00000066]              call_exact [string string::operator+(double)]                              JingleScript::HandleArithmeticOperator
    [00000067]             pop 8                                                                       JingleScript::ValueItem::Pop
    [00000068]             call_function [void ImGui_Text(string)]                                     JingleScript::Compiler::CompileFunctionCall
    [00000069]            pop 32                                                                       JingleScript::ValueItem::Pop
    [0000006A]            push 32                                                                      JingleScript::ValueItem::Push
    [0000006B]             copy_data string [PositionZ: ] 32                                           JingleScript::Compiler::CompileConstant
    [0000006C]             push 8                                                                      JingleScript::ValueItem::PushAfter
    [0000006D]              copy 8 48 [z] 8                                                            JingleScript::Compiler::CompileValue
    [0000006E]              call_exact [string string::operator+(double)]                              JingleScript::HandleArithmeticOperator
    [0000006F]             pop 8                                                                       JingleScript::ValueItem::Pop
    [00000070]             call_function [void ImGui_Text(string)]                                     JingleScript::Compiler::CompileFunctionCall
    [00000071]            pop 32                                                                       JingleScript::ValueItem::Pop
    [00000072]            destructor [double]                                                          JingleScript::ValueItem::Pop
    [00000073]           pop 8                                                                         JingleScript::ValueItem::Pop
    [00000074]           destructor [double]                                                           JingleScript::ValueItem::Pop
    [00000075]          pop 8                                                                          JingleScript::ValueItem::Pop
    [00000076]          destructor [double]                                                            JingleScript::ValueItem::Pop
    [00000077]         pop 8                                                                           JingleScript::ValueItem::Pop
    [00000078]         call_function [void ImGui_End()]                                                JingleScript::Compiler::CompileFunctionCall
    [00000079]        pop 8                                                                            JingleScript::ValueItem::Pop
    [0000007A]       pop 8                                                                             JingleScript::ValueItem::Pop
    [0000007B]       destructor [bool]                                                                 JingleScript::ValueItem::Pop
    [0000007C]      pop 1                                                                              JingleScript::ValueItem::Pop
    [0000007D]      destructor [bool]                                                                  JingleScript::ValueItem::Pop
    [0000007E]     pop 1                                                                               JingleScript::ValueItem::Pop
    [0000007F]     destructor [bool]                                                                   JingleScript::ValueItem::Pop
    [00000080]    pop 1                                                                                JingleScript::ValueItem::Pop
    [00000081]    destructor [bool]                                                                    JingleScript::ValueItem::Pop
    [00000082]   pop 1                                                                                 JingleScript::ValueItem::Pop
    [00000083]   destructor [bool]                                                                     JingleScript::ValueItem::Pop
    [00000084]  pop 1                                                                                  JingleScript::ValueItem::Pop
  }
}

class BindingModule extends Module {

  void BindingModule::~BindingModule() (Native)
}

class AssetModule extends Module {

  void AssetModule::~AssetModule() (Native)
}

class Type extends Object {

  bool Type::IsInherited(Type) (Native)
}

class Type {

  bool Type::IsInherited(Type) (Native)
}

class Native extends Attribute {
}
